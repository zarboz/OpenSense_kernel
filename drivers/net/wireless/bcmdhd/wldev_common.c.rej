--- drivers/net/wireless/bcmdhd/wldev_common.c	2013-04-03 17:56:19.086219339 -0700
+++ drivers/net/wireless/bcmdhd/wldev_common.c	2013-04-03 17:55:57.838156590 -0700
@@ -406,12 +448,336 @@
 	error = wldev_iovar_setbuf(dev, "country", &cspec, sizeof(cspec),
 		smbuf, sizeof(smbuf), NULL);
 	if (error < 0) {
-		WLDEV_ERROR(("%s: set country for %s as %s rev %d failed\n",
-			__FUNCTION__, country_code, cspec.ccode, cspec.rev));
-		return error;
+		if (strcmp(cspec.country_abbrev, DEF_COUNTRY_CODE) != 0) {
+			strcpy(country_code, DEF_COUNTRY_CODE);
+			retry = 0;
+			goto get_channel_retry;
+		}
+		else {
+			WLDEV_ERROR(("%s: set country for %s as %s rev %d failed\n",
+				__FUNCTION__, country_code, cspec.ccode, cspec.rev));
+			return error;
+		}
+	}
+	/* check if there are available channels */
+	else {
+		if (strcmp(country_code, DEF_COUNTRY_CODE) != 0) {
+			list = (wl_uint32_list_t *)(void *)chan_buf;
+			list->count = htod32(WL_NUMCHANNELS);
+			if ((error = wldev_ioctl_no_memset(dev, WLC_GET_VALID_CHANNELS, &chan_buf, sizeof(chan_buf), 0))) {
+				WLDEV_ERROR(("%s: get channel list fail! %d\n", __FUNCTION__, error));
+				return error;
+			}
+			/* if NULL, set default country code instead and set country code again */
+			WLDEV_ERROR(("%s: channel_count = %d\n", __FUNCTION__, list->count));
+			if (list->count == 0) {
+				strcpy(country_code, DEF_COUNTRY_CODE);
+				retry = 0;
+				goto get_channel_retry;
+			}
+		}	
 	}
 	dhd_bus_country_set(dev, &cspec);
-	WLDEV_ERROR(("%s: set country for %s as %s rev %d\n",
-		__FUNCTION__, country_code, cspec.ccode, cspec.rev));
+	printk(KERN_INFO "[WLAN] %s: set country for %s as %s rev %d\n",
+		__func__, country_code, cspec.ccode, cspec.rev);
+	return 0;
+}
+
+//BRCM APSTA START
+#ifdef APSTA_CONCURRENT
+static int wldev_set_pktfilter_enable_by_id(struct net_device *dev, int pkt_id, int enable)
+{
+	wl_pkt_filter_enable_t	enable_parm;
+	char smbuf[WLC_IOCTL_SMLEN];
+	int res;
+
+	/* enable or disable pkt filter, enable:1, disable:0 */
+	enable_parm.id = htod32(pkt_id);
+	enable_parm.enable = htod32(enable);
+	res = wldev_iovar_setbuf(dev, "pkt_filter_enable", &enable_parm, sizeof(enable_parm),
+		smbuf, sizeof(smbuf), NULL);
+	if (res < 0) {
+		WLDEV_ERROR(("%s: set pkt_filter_enable failed, error:%d\n", __FUNCTION__, res));
+		return res;
+	}
+	
+	return 0;
+}
+
+int wldev_set_pktfilter_enable(struct net_device *dev, int enable)
+{
+	wldev_set_pktfilter_enable_by_id(dev, 100, enable);
+        printf("%s: pkt_filter id:100 %s\n", __FUNCTION__, (enable)?"enable":"disable");
+	wldev_set_pktfilter_enable_by_id(dev, 101, enable);
+        printf("%s: pkt_filter id:101 %s\n", __FUNCTION__, (enable)?"enable":"disable");
+	wldev_set_pktfilter_enable_by_id(dev, 102, enable);
+        printf("%s: pkt_filter id:102 %s\n", __FUNCTION__, (enable)?"enable":"disable");
+	wldev_set_pktfilter_enable_by_id(dev, 104, enable);
+        printf("%s: pkt_filter id:104 %s\n", __FUNCTION__, (enable)?"enable":"disable");
+//HTC SSDP packet filter ++
+    wldev_set_pktfilter_enable_by_id(dev, 105, enable);
+        printf("%s: pkt_filter id:105 %s\n", __FUNCTION__, (enable)?"enable":"disable");
+//HTC SSDP packet filter --
+//HTC WIVU packet filter ++
+    wldev_set_pktfilter_enable_by_id(dev, 106, enable);
+        printf("%s: pkt_filter id:106 %s\n", __FUNCTION__, (enable)?"enable":"disable");
+//HTC WIVU packet filter --
+        return 0;
+}
+
+//Hugh 2012-03-22 ++++
+extern vndr_ie_setbuf_t *ie_setbuf;
+void
+wldev_add_vendr_ie(struct net_device *dev)
+{
+	int buflen;
+	char smbuf[WLC_IOCTL_SMLEN];
+	strcpy (ie_setbuf->cmd, "add");
+
+	buflen = ie_setbuf->vndr_ie_buffer.vndr_ie_list[0].vndr_ie_data.len -
+		VNDR_IE_MIN_LEN + sizeof(vndr_ie_setbuf_t) ;
+
+//	dev_wlc_bufvar_set(dev, "vndr_ie", (char *)ie_setbuf, buflen);
+
+	wldev_iovar_setbuf(dev, "vndr_ie", (char *)ie_setbuf, buflen,
+		smbuf, sizeof(smbuf), NULL);
+	
+
+	return;
+}
+
+void
+wldev_del_vendr_ie(struct net_device *dev)
+{
+	int buflen;
+    char smbuf[WLC_IOCTL_SMLEN];
+    
+	if (!ie_setbuf)
+		return;
+	/* Copy the vndr_ie SET command ("add"/"del") to the buffer */
+	strcpy (ie_setbuf->cmd, "del");
+
+	buflen = ie_setbuf->vndr_ie_buffer.vndr_ie_list[0].vndr_ie_data.len -
+	        VNDR_IE_MIN_LEN + sizeof(vndr_ie_setbuf_t) ;
+
+//	dev_wlc_bufvar_set(dev, "vndr_ie", (char *)ie_setbuf, buflen);
+
+	wldev_iovar_setbuf(dev, "vndr_ie", (char *)ie_setbuf, buflen,
+		smbuf, sizeof(smbuf), NULL);
+
+
+	kfree(ie_setbuf);
+	ie_setbuf = NULL;
+
+	return;
+	
+}
+
+//Hugh 2012-03-22 ----
+
+#ifdef SOFTAP
+
+#define WL_SOFTAP(x) printf x
+
+static struct ap_profile ap_cfg;
+
+extern struct net_device *ap_net_dev;
+extern int init_ap_profile_from_string(char *param_str, struct ap_profile *ap_cfg);
+extern int set_apsta_cfg(struct net_device *dev, struct ap_profile *ap);
+//BRCM_APSTA_START
+extern int set_ap_channel(struct net_device *dev, struct ap_profile *ap);
+//BRCM_APSTA_END
+extern int wait_for_ap_ready(int sec);
+extern void wl_iw_restart_apsta(struct ap_profile *ap);
+extern int wl_iw_set_ap_security(struct net_device *dev, struct ap_profile *ap);
+
+int
+wldev_set_apsta_cfg(struct net_device *dev, char *param_str)
+{
+	int res = 0;
+
+	printf("%s: enter\n", __FUNCTION__);
+
+        if (!dev) {
+                 WLDEV_ERROR(("%s: dev is null\n", __FUNCTION__));
+                 return -1;
+  	}
+	
+	init_ap_profile_from_string(param_str, &ap_cfg);
+
+        if ((res = set_apsta_cfg(dev, &ap_cfg)) < 0)
+                 WLDEV_ERROR(("%s failed to set_apsta_cfg %d\n", __FUNCTION__, res));
+	
+	return res;
+}
+
+void
+wldev_restart_ap(struct net_device *dev)
+{
+	wl_iw_restart_apsta(&ap_cfg);
+}
+
+#endif  /* SOFTAP */
+
+int
+wldev_get_ap_status(struct net_device *dev)
+{
+	int res = 0;
+	int ap = 0;
+	int apsta = 0;
+       	char smbuf[WLC_IOCTL_SMLEN];
+
+	printf("%s: enter\n", __FUNCTION__);
+
+        if (!dev) {
+                WLDEV_ERROR(("%s: dev is null\n", __FUNCTION__));
+                return -1;
+        }
+
+        if ((res = wldev_ioctl(dev, WLC_GET_AP, &ap, sizeof(ap), 0))) {
+                WLDEV_ERROR(("%s fail to get ap\n", __FUNCTION__));
+		ap = 0;
+	}
+
+        if ((res = wldev_iovar_getbuf(dev, "apsta", &apsta, sizeof(apsta), smbuf, sizeof(smbuf), NULL)) < 0 ){
+                WLDEV_ERROR(("%s fail to get apsta \n", __FUNCTION__));
+        } else {
+		memcpy(&apsta, smbuf, sizeof(apsta));
+		apsta = dtoh32(apsta);
+	}
+
+	return (ap||apsta);
+}
+
+//Hugh 2012-04-05 ++++
+int
+wldev_set_scansuppress(struct net_device *dev,int enable)
+{
+	int res = 0;
+
+	printf("%s: enter\n", __FUNCTION__);
+
+	if (!dev) {
+		WLDEV_ERROR(("%s: dev is null\n", __FUNCTION__));
+		return -1;
+	}
+
+	printf("wldev_set_scansuppress enable[%d]\n", enable);
+
+	if(enable){
+		if ((res = wldev_ioctl(dev, WLC_SET_SCANSUPPRESS, &enable, sizeof(enable), 1))) {
+			WLDEV_ERROR(("%s fail to get ap\n", __FUNCTION__));
+		}
+		printf("Successful enable scan suppress!!\n");
+	}else{
+		if ((res = wldev_ioctl(dev, WLC_SET_SCANSUPPRESS, &enable, sizeof(enable), 1))) {
+			WLDEV_ERROR(("%s fail to get ap\n", __FUNCTION__));
+		}
+		printf("Successful disable scan suppress!!\n");
+	}
+	
 	return 0;
 }
+
+//Hugh 2012-04-05 ++++
+
+extern int wl_softap_stop(struct net_device *dev);
+
+int
+wldev_set_apsta(struct net_device *dev, bool enable)
+{
+   	int res = 0;
+   	int mpc = 0;
+   	char smbuf[WLC_IOCTL_SMLEN];
+	bss_setbuf_t bss_setbuf;
+
+        memset(smbuf, 0, sizeof(smbuf));
+
+	printf("%s: enter\n", __FUNCTION__);
+
+   	if (!dev) {
+                  WLDEV_ERROR(("%s: dev is null\n", __FUNCTION__));
+                  return -1;
+   	}
+
+	if (enable){
+		/* wait for interface ready */
+		wait_for_ap_ready(1); //broacom 0405
+
+		if ( ap_net_dev == NULL ) {
+                        WLDEV_ERROR(("%s ap_net_dev == NULL\n", __FUNCTION__));
+                        goto fail;
+		}
+
+   		mpc = 0;
+      	        if ((res = wldev_iovar_setint(dev, "mpc", mpc))) {
+           	        WLDEV_ERROR(("%s fail to set mpc\n", __FUNCTION__));
+           	        goto fail;
+      	        }	
+
+         	if ((res = wl_iw_set_ap_security(ap_net_dev, &ap_cfg)) != 0) {
+           	        WLDEV_ERROR((" %s ERROR setting SOFTAP security in :%d\n", __FUNCTION__, res));
+         	        goto fail;
+                } 
+                
+                bss_setbuf.cfg = 1;
+                bss_setbuf.val = 1;  /* up the interface */
+
+                if ((res = wldev_iovar_setbuf_bsscfg(dev, "bss", &bss_setbuf, sizeof(bss_setbuf), smbuf, sizeof(smbuf), 1, NULL)) < 0){
+           	         WLDEV_ERROR(("%s: ERROR:%d, set bss up failed\n", __FUNCTION__, res));
+           	         goto fail;
+        	}
+
+	        bcm_mdelay(100);
+
+		if ((res = wldev_iovar_setint(dev, "allmulti", 1))) {
+            		WLDEV_ERROR(("%s: ERROR:%d, set allmulti failed\n", __FUNCTION__, res));
+            		goto fail;
+		}
+//BRCM_APSTA_START
+		set_ap_channel(dev,&ap_cfg);
+//BRCM_APSTA_END
+	} else {
+		if ((res = wl_softap_stop(ap_net_dev))){
+           		WLDEV_ERROR(("%s: ERROR:%d, call wl_softap_stop failed\n", __FUNCTION__, res));
+           		goto fail;
+		}
+
+    		mpc = 1;
+	     	if ((res = wldev_iovar_setint(dev, "mpc", mpc))) {
+        	   	WLDEV_ERROR(("%s fail to set mpc\n", __FUNCTION__));
+           		goto fail;
+	      	}	
+	}
+
+fail:
+    return res;
+}
+
+#ifdef BRCM_WPSAP
+int wldev_set_ap_sta_registra_wsec(struct net_device *dev, char *command, int total_len)
+{
+	int bytes_written = 0;
+	int wsec = 0;
+
+        if ( !ap_net_dev ) return 0;
+
+	wldev_iovar_getint(ap_net_dev, "wsec", &wsec);
+	WLDEV_ERROR(("### %s devname[%s],got wsec(bset)=0x%x\n", __FUNCTION__, ap_net_dev->name, wsec));
+
+	wsec |= SES_OW_ENABLED;
+	WLDEV_ERROR(("### %s devname[%s],wsec=0x%x\n", __FUNCTION__, ap_net_dev->name, wsec));
+
+	wldev_iovar_setint(ap_net_dev, "wsec", wsec);
+	WLDEV_ERROR(("### %s devname[%s] seting\n", __FUNCTION__, ap_net_dev->name));
+
+	wldev_iovar_getint(ap_net_dev, "wsec", &wsec);
+	WLDEV_ERROR(("### %s devname[%s],got(aset) wsec=0x%x\n", __FUNCTION__, ap_net_dev->name, wsec));
+
+	return bytes_written;
+}
+#endif /* BRCM_WPSAP */
+
+#endif /* APSTA_CONCURRENT */
+
+//BRCM APSTA END
